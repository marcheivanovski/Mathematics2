return (1)
}
rejection_sampling <- function (f, g, M, m){
g_mu <- c(0,0)
g_sigma <- matrix(c(1, 0, 0, 1), ncol = 2)
samples <- matrix(vector('integer', 2*m), ncol = 2)
for(i in 1:m){
repeat{
y <- rmvnorm(1, g_mu, g_sigma)
u <- runif(1, 0, 1)
if ( u > (f(y)/(M*g(y))) ){
break
}
}
samples[i,] <- y
}
return (samples)
}
plot(rejection_sampling(p_scenario1, envelope_uniform, 5, 10000))
df <- read.csv("datset.csv", header = TRUE, sep = ",")
model  <- glm(y ~ X2, family="binomial", data=df)
model
df <- read.csv("datset.csv", header = TRUE, sep = ",")
model  <- glm(y ~ X2+X3+X4+X5+X6+X7+X8+X9+X10+X11, family="binomial", data=df)
model
p_scenario1 <- function(x){
mu <- c(0,0)
sigma <- matrix(c(1, 0, 0, 1), ncol = 2)
return (dmvnorm(x, mu, sigma))
}
#x are just the fit params
p_scenario3 <- function(x){
df <- read.csv("datset.csv", header = TRUE, sep = ",")
#model  <- glm(y ~ X2, family="binomial", data=df)
#y_pred <- predict(model, data.frame(X2=df[,2]), type="response")
y_pred <- as.matrix(df[,1:2]) %*% x
return (prod(lr_likelihood(df$y, y_pred)))
}
p_scenario4 <- function(x){
df <- read.csv("datset.csv", header = TRUE, sep = ",")
#model  <- glm(y ~ X2+X3+X4+X5+X6+X7+X8+X9+X10+X11, family="binomial", data=df)
#y_pred <- predict(model, df[,2:11], type="response")
y_pred <- as.matrix(df[,1:11]) %*% x
return (prod(lr_likelihood(df$y, y_pred)))
}
envelope_multi_norm <- function(x){
return (dmvnorm(x))
}
envelope_multi_norm_sampler <- function(){
g_mu <- c(0,0)
g_sigma <- matrix(c(1, 0, 0, 1), ncol = 2)
return (rmvnorm(1, g_mu, g_sigma))
}
envelope_uniform <- function(x){
return (1)
}
rejection_sampling <- function (f, g, g_sampler, M, m){
samples <- matrix(vector('integer', 2*m), ncol = 2)
for(i in 1:m){
repeat{
y <- g_sampler()
u <- runif(1, 0, 1)
if ( u > (f(y)/(M*g(y))) ){
break
}
}
samples[i,] <- y
}
return (samples)
}
#plot(rejection_sampling(p_scenario1, envelope_uniform, 5, 10000))
plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_multi_norm_sampler, 5, 10000))
envelope_multi_norm <- function(x){
return (dmvnorm(x))
}
envelope_multi_norm_sampler <- function(){
g_mu <- c(0,0)
g_sigma <- matrix(c(1, 0, 0, 1), ncol = 2)
return (rmvnorm(1, g_mu, g_sigma))
}
envelope_uniform <- function(x){
return (1)
}
rejection_sampling <- function (f, g, g_sampler, M, m){
samples <- matrix(vector('integer', 2*m), ncol = 2)
for(i in 1:m){
repeat{
y <- g_sampler()
u <- runif(1, 0, 1)
if ( u > (f(y)/(M*g(y))) ){
break
}
}
samples[i,] <- y
}
return (samples)
}
plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_multi_norm_sampler, 2, 10000))
#plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_multi_norm_sampler, 5, 10000))
envelope_multi_norm <- function(x){
return (dmvnorm(x))
}
envelope_multi_norm_sampler <- function(){
g_mu <- c(0,0)
g_sigma <- matrix(c(1, 0, 0, 1), ncol = 2)
return (rmvnorm(1, g_mu, g_sigma))
}
envelope_uniform <- function(x){
return (1)
}
rejection_sampling <- function (f, g, g_sampler, M, m){
samples <- matrix(vector('integer', 2*m), ncol = 2)
for(i in 1:m){
repeat{
y <- g_sampler()
u <- runif(1, 0, 1)
if ( u > (f(y)/(M*g(y))) ){
break
}
}
samples[i,] <- y
}
return (samples)
}
plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_multi_norm_sampler, 10, 10000))
#plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_multi_norm_sampler, 5, 10000))
c('integer', length=n)
c('integer', length=2)
vector('integer', length=2)
diag(nrow=5)
envelope_multi_norm <- function(x){
return (dmvnorm(x))
}
envelope_multi_norm_sampler <- function(n){
g_mu <- vector('integer', length=n)
g_sigma <- diag(nrow=n)
return (rmvnorm(1, g_mu, g_sigma))
}
envelope_uniform <- function(x){
return (1)
}
envelope_uniform_sampler <- function(n){
return (runif(n, -5, 5))
}
rejection_sampling <- function (f, g, g_sampler, M, m){
samples <- matrix(vector('integer', 2*m), ncol = 2)
for(i in 1:m){
repeat{
y <- g_sampler(2) #2 is the dimension of bivariate
u <- runif(1, 0, 1)
if ( u > (f(y)/(M*g(y))) ){
break
}
}
samples[i,] <- y
}
return (samples)
}
plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_multi_norm_sampler, 10, 10000))
#plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_multi_norm_sampler, 5, 10000))
envelope_multi_norm <- function(x){
return (dmvnorm(x))
}
envelope_multi_norm_sampler <- function(n){
g_mu <- vector('integer', length=n)
g_sigma <- diag(nrow=n)
return (rmvnorm(1, g_mu, g_sigma))
}
envelope_uniform <- function(x){
return (1)
}
envelope_uniform_sampler <- function(n){
return (runif(n, -5, 5))
}
rejection_sampling <- function (f, g, g_sampler, M, m){
samples <- matrix(vector('integer', 2*m), ncol = 2)
for(i in 1:m){
repeat{
y <- g_sampler(2) #2 is the dimension of bivariate
u <- runif(1, 0, 1)
if ( u > (f(y)/(M*g(y))) ){
break
}
}
samples[i,] <- y
}
return (samples)
}
plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_multi_norm_sampler, 10, 1000))
#plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_multi_norm_sampler, 5, 10000))
envelope_multi_norm <- function(x){
return (dmvnorm(x))
}
envelope_multi_norm_sampler <- function(n){
g_mu <- vector('integer', length=n)
g_sigma <- diag(nrow=n)
return (rmvnorm(1, g_mu, g_sigma))
}
envelope_uniform <- function(x){
return (1)
}
envelope_uniform_sampler <- function(n){
return (runif(n, -5, 5))
}
rejection_sampling <- function (f, g, g_sampler, M, m){
samples <- matrix(vector('integer', 2*m), ncol = 2)
for(i in 1:m){
repeat{
y <- g_sampler(2) #2 is the dimension of bivariate
u <- runif(1, 0, 1)
if ( u > (f(y)/(M*g(y))) ){
break
}
}
samples[i,] <- y
}
return (samples)
}
plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_multi_norm_sampler, 10, 10000))
#plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_multi_norm_sampler, 5, 10000))
envelope_multi_norm <- function(x){
return (dmvnorm(x))
}
envelope_multi_norm_sampler <- function(n){
g_mu <- vector('integer', length=n)
g_sigma <- diag(nrow=n)
return (rmvnorm(1, g_mu, g_sigma))
}
envelope_uniform <- function(x){
return (1)
}
envelope_uniform_sampler <- function(n){
return (runif(n, -5, 5))
}
rejection_sampling <- function (f, g, g_sampler, M, m){
samples <- matrix(vector('integer', 2*m), ncol = 2)
for(i in 1:m){
repeat{
y <- g_sampler(2) #2 is the dimension of bivariate
u <- runif(1, 0, 1)
if ( u > (f(y)/(M*g(y))) ){
break
}
}
samples[i,] <- y
}
return (samples)
}
plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_multi_norm_sampler, 10, 5000))
#plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_multi_norm_sampler, 5, 10000))
envelope_multi_norm <- function(x){
return (dmvnorm(x))
}
envelope_multi_norm_sampler <- function(n){
g_mu <- vector('integer', length=n)
g_sigma <- diag(nrow=n)
return (rmvnorm(1, g_mu, g_sigma))
}
envelope_uniform <- function(x){
return (1)
}
envelope_uniform_sampler <- function(n){
return (runif(n, -5, 5))
}
rejection_sampling <- function (f, g, g_sampler, M, m){
samples <- matrix(vector('integer', 2*m), ncol = 2)
for(i in 1:m){
repeat{
y <- g_sampler(2) #2 is the dimension of bivariate
u <- runif(1, 0, 1)
if ( u > (f(y)/(M*g(y))) ){
break
}
}
samples[i,] <- y
}
return (samples)
}
plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_uniform_sampler, 10, 5000))
#plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_multi_norm_sampler, 5, 10000))
f(y)/(M*g(y))
y<-envelope_uniform_sampler(2)
y
envelope_uniform_sampler(2)
envelope_uniform_sampler(2)
envelope_uniform_sampler(2)
envelope_uniform_sampler(2)
envelope_uniform_sampler(2)
envelope_uniform_sampler(2)
envelope_uniform_sampler(2)
envelope_uniform_sampler(2)
envelope_uniform_sampler(2)
envelope_uniform_sampler(2)
envelope_uniform_sampler(2)
envelope_uniform_sampler(2)
envelope_uniform_sampler(2)
envelope_uniform(envelope_uniform_sampler(2))
envelope_uniform(envelope_uniform_sampler(2))
envelope_uniform(envelope_uniform_sampler(2))
envelope_uniform(envelope_uniform_sampler(2))
envelope_uniform(envelope_uniform_sampler(2))
envelope_uniform(envelope_uniform_sampler(2))
envelope_uniform(envelope_uniform_sampler(2))
envelope_multi_norm <- function(x){
return (dmvnorm(x))
}
envelope_multi_norm_sampler <- function(n){
g_mu <- vector('integer', length=n)
g_sigma <- diag(nrow=n)
return (rmvnorm(1, g_mu, g_sigma))
}
envelope_uniform <- function(x){
return (1)
}
envelope_uniform_sampler <- function(n){
return (runif(n, 0, 1))
}
rejection_sampling <- function (f, g, g_sampler, M, m){
samples <- matrix(vector('integer', 2*m), ncol = 2)
for(i in 1:m){
repeat{
y <- g_sampler(2) #2 is the dimension of bivariate
u <- runif(1, 0, 1)
if ( u > (f(y)/(M*g(y))) ){
break
}
}
samples[i,] <- y
}
return (samples)
}
plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_uniform_sampler, 10, 5000))
#plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_multi_norm_sampler, 5, 10000))
envelope_uniform_sampler(2)
envelope_multi_norm <- function(x){
return (dmvnorm(x))
}
envelope_multi_norm_sampler <- function(n){
g_mu <- vector('integer', length=n)
g_sigma <- diag(nrow=n)
return (rmvnorm(1))
}
envelope_uniform <- function(x){
return (1)
}
envelope_uniform_sampler <- function(n){
return (runif(n, 0, 1))
}
rejection_sampling <- function (f, g, g_sampler, M, m){
samples <- matrix(vector('integer', 2*m), ncol = 2)
for(i in 1:m){
repeat{
y <- g_sampler(2) #2 is the dimension of bivariate
u <- runif(1, 0, 1)
if ( u > (f(y)/(M*g(y))) ){
break
}
}
samples[i,] <- y
}
return (samples)
}
#plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_uniform_sampler, 10, 5000))
plot(rejection_sampling(p_scenario1, envelope_multi_norm, envelope_multi_norm_sampler, 5, 10000))
rmvnorm(1)
envelope_multi_norm <- function(x){
return (dmvnorm(x))
}
envelope_multi_norm_sampler <- function(n){
g_mu <- vector('integer', length=n)
g_sigma <- diag(nrow=n)
return (rmvnorm(1, g_mu, g_sigma))
}
envelope_uniform <- function(x){
return (1)
}
envelope_uniform_sampler <- function(n){
return (runif(n, 0, 1))
}
rejection_sampling <- function (f, g, g_sampler, M, m){
samples <- matrix(vector('integer', 2*m), ncol = 2)
for(i in 1:m){
repeat{
y <- g_sampler(2) #2 is the dimension of bivariate
u <- runif(1, 0, 1)
if ( u > (f(y)/(M*g(y))) ){
break
}
}
samples[i,] <- y
}
return (samples)
}
#plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_uniform_sampler, 10, 5000))
plot(rejection_sampling(p_scenario1, envelope_multi_norm, envelope_multi_norm_sampler, 5, 10000))
envelope_multi_norm <- function(x){
return (dmvnorm(x))
}
envelope_multi_norm_sampler <- function(n){
g_mu <- vector('integer', length=n)
g_sigma <- diag(nrow=n)
return (rmvnorm(1, g_mu, g_sigma))
}
envelope_uniform <- function(x){
return (1)
}
envelope_uniform_sampler <- function(n){
return (runif(n, 0, 1))
}
rejection_sampling <- function (f, g, g_sampler, M, m){
samples <- matrix(vector('integer', 2*m), ncol = 2)
for(i in 1:m){
repeat{
y <- g_sampler(2) #2 is the dimension of bivariate
u <- runif(1, 0, 1)
if ( u > (f(y)/(M*g(y))) ){
break
}
}
samples[i,] <- y
}
return (samples)
}
#plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_uniform_sampler, 10, 5000))
samples <- rejection_sampling(p_scenario1, envelope_multi_norm, envelope_multi_norm_sampler, 5, 10000)
den3d <- kde2d(samples[,1], samples[,2])
persp(den3d, box=FALSE)
#install.packages("MASS")
library("MASS")
library(plotly)
#install.packages("MASS")
install.packages("plotly")
#install.packages("MASS")
install.packages("plotly")
library("MASS")
library("plotly")
library("mvtnorm")
set.seed(123)
setwd("C:/Users/marko/OneDrive/Desktop/M2/Homework5")
#install.packages("MASS")
#install.packages("plotly")
library("MASS")
library("plotly")
library("mvtnorm")
set.seed(123)
setwd("C:/Users/marko/OneDrive/Desktop/M2/Homework5")
envelope_multi_norm <- function(x){
return (dmvnorm(x))
}
envelope_multi_norm_sampler <- function(n){
g_mu <- vector('integer', length=n)
g_sigma <- diag(nrow=n)
return (rmvnorm(1, g_mu, g_sigma))
}
envelope_uniform <- function(x){
return (1)
}
envelope_uniform_sampler <- function(n){
return (runif(n, 0, 1))
}
rejection_sampling <- function (f, g, g_sampler, M, m){
samples <- matrix(vector('integer', 2*m), ncol = 2)
for(i in 1:m){
repeat{
y <- g_sampler(2) #2 is the dimension of bivariate
u <- runif(1, 0, 1)
if ( u > (f(y)/(M*g(y))) ){
break
}
}
samples[i,] <- y
}
return (samples)
}
#plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_uniform_sampler, 10, 5000))
samples <- rejection_sampling(p_scenario1, envelope_multi_norm, envelope_multi_norm_sampler, 5, 10000)
den3d <- kde2d(samples[,1], samples[,2])
#persp(den3d, box=FALSE)
plot_ly(x=den3d$x, y=den3d$y, z=den3d$z) %>% add_surface()
envelope_multi_norm <- function(x){
return (dmvnorm(x))
}
envelope_multi_norm_sampler <- function(n){
g_mu <- vector('integer', length=n)
g_sigma <- diag(nrow=n)
return (rmvnorm(1, g_mu, g_sigma))
}
envelope_uniform <- function(x){
return (1)
}
envelope_uniform_sampler <- function(n){
return (runif(n, 0, 1))
}
rejection_sampling <- function (f, g, g_sampler, M, m){
samples <- matrix(vector('integer', 2*m), ncol = 2)
for(i in 1:m){
repeat{
y <- g_sampler(2) #2 is the dimension of bivariate
u <- runif(1, 0, 1)
if ( u > (f(y)/(M*g(y))) ){
break
}
}
samples[i,] <- y
}
return (samples)
}
#plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_uniform_sampler, 10, 5000))
samples <- rejection_sampling(p_scenario1, envelope_multi_norm, envelope_multi_norm_sampler, 5, 10000)
den3d <- kde2d(samples[,1], samples[,2])
#persp(den3d, box=FALSE)
plot_ly(x=den3d$x, y=den3d$y, z=den3d$z) %>% add_surface()
